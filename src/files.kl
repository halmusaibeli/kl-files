PROGRAM files
%NOBUSYLAMP
%COMMENT = 'handle files/logs'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include display.c.klt
%include files.klt


%include strings.klh
%include files.klh
%include display.klh
%include errors.klh

--fanuc utilities
%include klrdutil.kl

BEGIN
END files

--### Public #####

--
ROUTINE files__open
  -- access_typ: 'RO' - Read only
  --            'RW' - Read Write
  --            'AP' - Append at end of file
  --            'UD' - Update from beginning of file
  VAR
    ec       : INTEGER
  BEGIN
    CLR_IO_STAT(fl)
    OPEN FILE fl(access_typ, filename)
    files__check_open(filename, fl)
  END files__open

--
ROUTINE files__close
  VAR
    ec    : INTEGER
  BEGIN
    CLOSE FILE fl
    files__check_closed(filename, fl)
  END files__close

ROUTINE files__read_line
  VAR
    str : STRING[127]
    buf : INTEGER
    status : INTEGER
    ec : INTEGER
  BEGIN
    --check that file is open
    files__check_open(filename, fl)

    ec = IO_STATUS(fl)
    SELECT ec OF
      CASE(0):
        READ fl (str)
        IF UNINIT(str) THEN
          RETURN('')
        ELSE
          RETURN(str)
        ENDIF
      CASE(FILE_RAM_FULL):
        RETURN('EOF')
      ELSE:
        RETURN('')
    ENDSELECT

  END files__read_line


ROUTINE files__check_open
  VAR
    ec       : INTEGER
  BEGIN
    ec = IO_STATUS(fl)
    IF ec <> 0 THEN
      SELECT ec OF
        CASE (FILE_NOT_OPENED):
          karelError(ec,'File '+ filename +' not opened', ER_ABORT)
        CASE (FILE_NOT_OPEN_PREDEF):
          karelError(ec,'cannot open predefined file '+ filename, ER_ABORT)
        CASE (FILE_OPEN_FAILED):
          karelError(ec,'File '+ filename +' failed to open', ER_ABORT)
        CASE (FILE_MULTIPLE_ACCESS):
          karelError(ec,'File '+ filename +' already opened', ER_WARN)
        CASE (FILE_RAM_FULL):
          WRITE TPDISPLAY(filename, ' EOF', CR)
        ELSE:
          karelError(ec,'Unhandled problem opening '+ filename, ER_ABORT)
      ENDSELECT
    ENDIF 
  END files__check_open


ROUTINE files__check_closed
  VAR
    ec       : INTEGER
  BEGIN
    ec = IO_STATUS(fl)
    IF ec <> 0 THEN
      SELECT ec OF
        CASE (FILE_NOT_OPENED):
          karelError(ec,'File '+ filename +' is not open', ER_WARN)
        CASE (FILE_CLOSE_FAILED):
          karelError(ec,'File '+ filename +' could not close', ER_ABORT)
        CASE (FILE_NOT_CLOSE_PREDEF):
          karelError(ec,'Could not close predefined file '+ filename, ER_ABORT)
        ELSE:
          karelError(ec,'Unhandled problem closing'+ filename, ER_ABORT)
      ENDSELECT
    ENDIF
  END files__check_closed

ROUTINE files__check_rw
  VAR
    ec       : INTEGER
  BEGIN
    ec = IO_STATUS(fl)
    IF ec <> 0 THEN 
      SELECT ec OF
        CASE (FILE_RAM_FULL):
          karelError(ec,'Memory location of file ' + filename + ' is full', ER_WARN)
        CASE (FILE_UNINIT):
          karelError(ec,'File '+ filename +' is uninitialized', ER_ABORT)
        CASE (FILE_MULTIPLE_ACCESS):
          karelError(ec,'Multiple program have access to '+ filename, ER_WARN_STP)
        CASE (FILE_READ_FAILED):
          karelError(ec,'Could not read file '+ filename, ER_ABORT)
        CASE (FILE_READ_IO_FAILED):
          karelError(ec,'read IO failed for '+ filename, ER_ABORT)
        CASE (FILE_READ_TO_SHORT):
          karelError(ec,'read data is too short for file '+ filename, ER_ABORT)
        CASE (FILE_READ_TIMEOUT):
          karelError(ec,'read request timed out for '+ filename, ER_ABORT)
        CASE (FILE_ILLEGAL_ASCII):
          karelError(ec,'Illegal ASCII character in read for '+ filename, ER_ABORT)
        CASE (FILE_WRITE_FAILED):
          karelError(ec,'Could not write to file '+ filename, ER_ABORT)
        CASE (FILE_WRITE_IO_FAILED):
          karelError(ec,'write IO failed for '+ filename, ER_ABORT)
        ELSE:
          karelError(ec,'Unhandled issue with '+ filename, ER_ABORT)
      ENDSELECT
    ENDIF
  END files__check_rw

-- log debug, info, warning, or error message
ROUTINE files__log_message
  BEGIN
    display__set_severity(severity)
    display__set_message(msg)
    WRITE fl( display__get_message )
  END files__log_message


ROUTINE files__load_on_disk
  VAR
    stat : INTEGER
  BEGIN
    IF overwrite = TRUE THEN
      LOAD(filename, 1, stat)
    ELSE
      LOAD(filename, 0, stat)
    ENDIF

    IF stat <> 0 THEN
      karelError(stat, 'Error trying to load ' + filename, ER_ABORT)
    ENDIF
  END files__load_on_disk

--
ROUTINE files__create
  VAR
    STATUS 	  : INTEGER
    exists	  : BOOLEAN
  BEGIN
    -- try to open file in Read only state
    CLR_IO_STAT(fl)
    OPEN FILE fl('RO', filename)
    STATUS = IO_STATUS(fl)
    -- if the file fails to open
    -- reopen as a RW file input blank line then exit
    -- to create the file
    IF STATUS <> 0 THEN
      files__open(filename, 'RW', fl)
      WRITE fl('')
      files__close(filename, fl)
      RETURN(TRUE)
    ELSE
      files__close(filename, fl)
      RETURN(FALSE)
    ENDIF 
  END files__create

ROUTINE files__clear
  VAR
    status : INTEGER
  BEGIN
    CLR_IO_STAT(fl)
    IF IO_STATUS(fl) <> 0 THEN CLOSE FILE fl; ENDIF

    OPEN FILE fl ('RW', filename)
    CLOSE FILE fl

  END files__clear

-- read any file into a string array
-- for further processing
ROUTINE files__read_to_sarr
  VAR
    dumStr  : STRING[30]
    i     : INTEGER
    b     : BOOLEAN
  BEGIN
    dumStr = ''
    files__open(filename, 'RO', fl)
    i = 1
    FOR i=1 TO ARRAY_LEN(out) DO
      -- line by line go through read file
      -- output into an array
      READ fl(out[i])
      files__check_rw(filename, fl)

      IF UNINIT(out[i]) THEN
        karelError(CANT_READ,'ERROR, invalid Program' + filename + '. Unable to read.', ER_ABORT)
      ENDIF
      -- evaluate if line contains the break keyword
      IF (NOT UNINIT(break_str)) OR (break_str <> '') THEN
        b = search_str(out[i], break_str)
        IF b THEN
          files__close(filename, fl)
          RETURN(TRUE)
        ENDIF
      ENDIF
    ENDFOR

    IF (BYTES_LEFT(fl) > 0) THEN
      karelError(STR_TOO_LONG,'String array was not large enough to store ' + filename, ER_WARN)
    ENDIF

    files__close(filename, fl)
    RETURN(FALSE)
  END files__read_to_sarr


ROUTINE files__write_from_pipe
  VAR
    n_bytes : INTEGER
    status  : INTEGER
    store_s : STRING[127]
  BEGIN
    --open write file
    files__open(filename, 'AP', write_fl)

    --open pipe file
    files__open(pipname, 'RO', pip_fl)

    --start reading pipe
    --read how many bytes in buffer
    --max buffer is 127 Bytes
    BYTES_AHEAD(pip_fl, n_bytes, status)
    WHILE n_bytes > 0 DO
      READ pip_fl (store_s::n_bytes::0)
      WRITE write_fl (store_s)
      BYTES_AHEAD(pip_fl, n_bytes, status)
    ENDWHILE

    --close the pipe at eof
    files__close(pipname, pip_fl)

    --close write file
    files__close(filename, write_fl)

  END files__write_from_pipe


ROUTINE files__write_to_display
  VAR
    n_bytes : INTEGER
    status  : INTEGER
    store_s : STRING[127]
  BEGIN

    files__open(filename, 'RO', fl)

    --start reading pipe
    --read how many bytes in buffer
    --max buffer is 127 Bytes
    BYTES_AHEAD(fl, n_bytes, status)

    WHILE n_bytes > 0 DO
      READ fl (store_s::n_bytes::0)
      WRITE TPDISPLAY (store_s)
      BYTES_AHEAD(fl, n_bytes, status)
    ENDWHILE

    --close the pipe at eof
    files__close(filename, fl)

  END files__write_to_display

-- Determine if a file is an LS file
ROUTINE files__is_LS
  VAR
    dumStr	 : STRING[30]
    line  : STRING[127]
    b : BOOLEAN
  BEGIN
    -- initialize variables
    dumStr = ''
    b = FALSE
    files__open(filename, 'RO', fl)
    -- loop through file line by line
    -- if '/MN' is found in the file
    -- it is regarded as an LS file
    WHILE dumStr <> '/MN' DO
      READ fl(line)
      files__check_rw(filename, fl)
      IF UNINIT(line) THEN
        karelError(CANT_READ,'ERROR, invalid Program' + filename + '. Unable to read.', ER_ABORT)
      ENDIF
      dumStr = SUB_STR(line, 1, 3)
      -- if there is nothing else to read
      -- in the file break out of loop
      IF (BYTES_LEFT(fl) = 0) THEN
        GOTO BREAK
      ENDIF
    ENDWHILE
    -- if found set to true
    IF (dumStr = '/MN') THEN
      b = TRUE
    ENDIF
    -- close file
    BREAK::
    files__close(filename, fl)

    RETURN(b)
  END files__is_LS

